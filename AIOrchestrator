class AIOrchestrator:
    def __init__(self):
        self.agents = [Looter(), MEVMaster(), Arbitrader()]
        self.profit_history = []

    def optimize(self):
        profits = self.get_agent_profits()
        self.profit_history.append(profits)
        
        # Adjust strategy based on feedback
        if profits["Arbitrader"] > profits["MEVMaster"]:
            self.rebalance_agents("Arbitrader", 70)
        else:
            self.rebalance_agents("MEVMaster", 70)

    def schedule_tasks(self):
        for agent in self.agents:
            if agent.should_run():
                agent.execute()
